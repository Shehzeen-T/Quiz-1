//using single file
#include <iostream>

using namespace std;

// Node class representing an individual node in the linked list
class Node {
public:
    char data;
    Node* next;

    Node(char value) {
        data = value;
        next = NULL;
    }
};

// LinkedList class to handle the list operations
class LinkedList {
public:
    Node* head;

    LinkedList() {
        head = NULL;
    }

    void insert(char value) {
        Node* newNode = new Node(value);
        if (head == NULL) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    void display() const {
        Node* current = head;
        while (current != NULL) {
            cout << current->data << " ";
            current = current->next;
        }
        cout << endl;
    }
};

// Non-member function to concatenate two linked lists
void concatenate(LinkedList& list1, LinkedList& list2) {
    if (list1.head == NULL) {
        list1.head = list2.head;
        return;
    }

    Node* current = list1.head;
    while (current->next != NULL) {
        current = current->next;
    }

    current->next = list2.head;
}

// Non-member function to find the intersection of two linked lists
LinkedList intersection(LinkedList& list1, LinkedList& list2) {
    LinkedList result;
    Node* ptr1 = list1.head;

    while (ptr1 != NULL) {
        Node* ptr2 = list2.head;

        while (ptr2 != NULL) {
            if (ptr1->data == ptr2->data) {
                result.insert(ptr1->data);
                break;
            }
            ptr2 = ptr2->next;
        }
        ptr1 = ptr1->next;
    }

    return result;
}

// Non-member function to compare two linked lists lexicographically
int compareStrings(LinkedList& list1, LinkedList& list2) {
    Node* ptr1 = list1.head;
    Node* ptr2 = list2.head;

    while (ptr1 != NULL && ptr2 != NULL) {
        if (ptr1->data > ptr2->data) {
            return 1;
        } else if (ptr1->data < ptr2->data) {
            return -1;
        }
        ptr1 = ptr1->next;
        ptr2 = ptr2->next;
    }

    if (ptr1 == NULL && ptr2 == NULL) {
        return 0;
    } else if (ptr1 == NULL) {
        return -1;
    } else {
        return 1;
    }
}

int main() {
    // Test for concatenate
    LinkedList list1;
    list1.insert('a');
    list1.insert('b');
    list1.insert('c');

    LinkedList list2;
    list2.insert('d');
    list2.insert('e');

    cout << "List 1 before concatenation: ";
    list1.display();
    cout << "List 2: ";
    list2.display();

    concatenate(list1, list2);
    cout << "List 1 after concatenation: ";
    list1.display();

    // Test for intersection
    LinkedList list3;
    list3.insert('b');
    list3.insert('c');
    list3.insert('f');

    LinkedList intersectedList = intersection(list1, list3);
    cout << "Intersection of List 1 and List 3: ";
    intersectedList.display();

    // Test for compareStrings
    LinkedList str1;
    str1.insert('h');
    str1.insert('e');
    str1.insert('l');
    str1.insert('l');
    str1.insert('o');

    LinkedList str2;
    str2.insert('h');
    str2.insert('e');
    str2.insert('l');
    str2.insert('p');

    int result = compareStrings(str1, str2);
    cout << "Comparison result of str1 and str2: " << result << endl;  // Output should be -1

    return 0;
}



